document.addEventListener('DOMContentLoaded', () => {
    // --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const subjectsContainer = document.getElementById('subjects-container');
    const addSubjectFab = document.getElementById('add-subject-fab');
    const settingsButton = document.getElementById('settings-button');
    const settingsModal = document.getElementById('settings-modal');
    const closeModalButton = settingsModal.querySelector('.close-button');
    const gradeScaleSelect = document.getElementById('grade-scale');

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ—É—Ç–µ—Ä–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const totalSubjectsSpan = document.getElementById('total-subjects');
    const overallAvgGradeSpan = document.getElementById('overall-avg-grade');
    const maxSubjectGradeSpan = document.getElementById('max-subject-grade');
    const minSubjectGradeSpan = document.getElementById('min-subject-grade');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const workTypesList = document.getElementById('work-types-list');
    const newWorkTypeNameInput = document.getElementById('new-work-type-name');
    const newWorkTypeWeightInput = document.getElementById('new-work-type-weight');
    const addWorkTypeButton = document.getElementById('add-work-type-button');

    const subjectNamesList = document.getElementById('subject-names-list');
    const newSubjectNameInput = document.getElementById('new-subject-name');
    const addSubjectNameButton = document.getElementById('add-subject-name-button');

    const darkThemeToggle = document.getElementById('dark-theme-toggle');
    const showTipsToggle = document.getElementById('show-tips-toggle');
    const autoSaveToggle = document.getElementById('auto-save-toggle');

    const exportCsvButton = document.getElementById('export-csv-button');
    const exportPdfButton = document.getElementById('export-pdf-button');
    const resetDataButton = document.getElementById('reset-data-button');
    const saveDataButton = document.getElementById('save-data-button'); // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –≤ —à–∞–ø–∫–µ
    const resetButton = document.getElementById('reset-button'); // –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å" –≤ —à–∞–ø–∫–µ

    // –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const subjectTemplates = document.querySelectorAll('.subject-template');

    // –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    const addSubjectQuickButton = document.getElementById('add-subject-quick');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
    const subjectSettingsModal = document.getElementById('subject-settings-modal');
    const closeSubjectSettingsButton = subjectSettingsModal.querySelector('.close-button');
    const subjectNameInput = document.getElementById('subject-name-input');
    const subjectColorInput = document.getElementById('subject-color');
    const subjectIconSelect = document.getElementById('subject-icon');
    const subjectWeightInput = document.getElementById('subject-weight');
    const subjectGoalInput = document.getElementById('subject-goal');
    const subjectNotificationsCheckbox = document.getElementById('subject-notifications');
    const subjectAutoCalcCheckbox = document.getElementById('subject-auto-calc');
    const subjectNotesTextarea = document.getElementById('subject-notes');
    const saveSubjectSettingsButton = document.getElementById('save-subject-settings');
    const cancelSubjectSettingsButton = document.getElementById('cancel-subject-settings');

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    let currentSubjectIndex = -1;
    let isNewSubject = false;

    // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–∞–Ω–Ω—ã–µ) ---
    let appState = {
        settings: {
            scale: '5-point', // '5-point', '12-point', '10-point', 'A-F'
            workTypes: [
                { name: '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è', weight: 1.0 },
                { name: '–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞', weight: 0.7 },
                { name: '–†–∞–±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–∫–µ', weight: 0.5 },
                { name: '–ó–∞—á—ë—Ç', weight: 0.9 }
            ],
            theme: 'light', // 'light' or 'dark'
            showTips: true,
            autoSave: true
        },
        subjects: []
    };

    // –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
    const subjectTemplatesData = {
        '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': { icon: 'üìê', color: '#4361EE' },
        '–§–∏–∑–∏–∫–∞': { icon: '‚ö°', color: '#FF6B35' },
        '–•–∏–º–∏—è': { icon: 'üß™', color: '#7209B7' },
        '–ë–∏–æ–ª–æ–≥–∏—è': { icon: 'üå±', color: '#4CAF50' },
        '–ò—Å—Ç–æ—Ä–∏—è': { icon: 'üìö', color: '#8B4513' },
        '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': { icon: 'üåç', color: '#2196F3' },
        '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': { icon: 'üìñ', color: '#E91E63' },
        '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': { icon: 'üìù', color: '#FF5722' },
        '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫': { icon: 'üá¨üáß', color: '#3F51B5' },
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': { icon: 'üíª', color: '#00BCD4' },
        '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞': { icon: 'üèÉ', color: '#FF9800' },
        '–ò–ó–û': { icon: 'üé®', color: '#9C27B0' },
        '–ú—É–∑—ã–∫–∞': { icon: 'üéµ', color: '#FF4081' },
        '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è': { icon: 'üîß', color: '#795548' },
        '–û–ë–ñ': { icon: 'üõ°Ô∏è', color: '#607D8B' },
        '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': { icon: 'üèõÔ∏è', color: '#9E9E9E' }
    };

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (LocalForage - –∏–º–∏—Ç–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã) ---
    const saveData = () => {
        try {
            localStorage.setItem('gradeMasterState', JSON.stringify(appState));
            console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.');
            return false;
        }
    };

    const saveDataAuto = () => {
        // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ —è–≤–Ω–æ
        if (appState.settings.autoSave !== false) {
            saveData();
        }
    };

    const saveDataManual = () => {
        if (saveData()) {
            alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        }
    };

    const loadData = () => {
        try {
            const savedState = localStorage.getItem('gradeMasterState');
            if (savedState) {
                const parsedState = JSON.parse(savedState);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                appState = {
                    settings: {
                        scale: parsedState.settings?.scale || '5-point',
                        workTypes: parsedState.settings?.workTypes || [
                            { name: '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è', weight: 1.0 },
                            { name: '–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞', weight: 0.7 },
                            { name: '–†–∞–±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–∫–µ', weight: 0.5 },
                            { name: '–ó–∞—á—ë—Ç', weight: 0.9 }
                        ],
                        theme: parsedState.settings?.theme || 'light',
                        showTips: parsedState.settings?.showTips !== false,
                        autoSave: parsedState.settings?.autoSave !== false
                    },
                    subjects: parsedState.subjects || []
                };
                console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.');
            } else {
                console.log('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
                // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                saveData();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
            // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            saveData();
        }
        applySettings();
        renderSubjects();
        updateOverallStats();
    };

    const resetData = () => {
        try {
            localStorage.removeItem('gradeMasterState');
            appState = { // –°–±—Ä–æ—Å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                settings: {
                    scale: '5-point',
                    workTypes: [
                        { name: '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è', weight: 1.0 },
                        { name: '–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞', weight: 0.7 },
                        { name: '–†–∞–±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–∫–µ', weight: 0.5 },
                        { name: '–ó–∞—á—ë—Ç', weight: 0.9 }
                    ],
                    theme: 'light',
                    showTips: true,
                    autoSave: true
                },
                subjects: []
            };
            applySettings();
            renderSubjects();
            updateOverallStats();
            saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.log('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.');
            alert('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:', error);
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
    };

    // --- –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    const applySettings = () => {
        // –®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫
        gradeScaleSelect.value = appState.settings.scale;

        // –¢–µ–º–∞
        if (appState.settings.theme === 'dark') {
            document.body.classList.add('dark-theme');
            darkThemeToggle.checked = true;
        } else {
            document.body.classList.remove('dark-theme');
            darkThemeToggle.checked = false;
        }

        // –ü–æ–¥—Å–∫–∞–∑–∫–∏ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã, –Ω–æ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é)
        showTipsToggle.checked = appState.settings.showTips;

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        autoSaveToggle.checked = appState.settings.autoSave;

        // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        renderWorkTypesInSettings();
        // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        renderSubjectNamesInSettings();
    };

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const renderWorkTypesInSettings = () => {
        workTypesList.innerHTML = '';
        appState.settings.workTypes.forEach((type, index) => {
            const div = document.createElement('div');
            div.classList.add('work-type-item');
            div.innerHTML = `
                <span>${type.name}</span>
                <select class="work-type-weight">
                    ${Array.from({ length: 11 }, (_, i) => (i / 10).toFixed(1)).map(weight => `
                        <option value="${weight}" ${type.weight === parseFloat(weight) ? 'selected' : ''}>${weight}</option>
                    `).join('')}
                </select>
                <button class="remove-work-type-button" data-index="${index}"><span class="material-icons">close</span></button>
            `;
            workTypesList.appendChild(div);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        workTypesList.querySelectorAll('.work-type-weight').forEach(select => {
            select.addEventListener('change', (e) => {
                const index = Array.from(workTypesList.children).indexOf(e.target.closest('.work-type-item'));
                if (index !== -1) {
                                appState.settings.workTypes[index].weight = parseFloat(e.target.value);
            saveDataAuto();
            renderSubjects(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —Ç.–∫. –≤–µ—Å–∞ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
            updateOverallStats();
                }
            });
        });

        workTypesList.querySelectorAll('.remove-work-type-button').forEach(button => {
            button.addEventListener('click', (e) => {
                const index = parseInt(e.currentTarget.dataset.index);
                if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ç–∏–ø —Ä–∞–±–æ—Ç—ã "${appState.settings.workTypes[index].name}"?`)) {
                    appState.settings.workTypes.splice(index, 1);
                    saveDataAuto();
                    renderWorkTypesInSettings();
                    renderSubjects(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —Ç.–∫. —Ç–∏–ø—ã —Ä–∞–±–æ—Ç –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
                    updateOverallStats();
                }
            });
        });
    };

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const renderSubjectNamesInSettings = () => {
        subjectNamesList.innerHTML = '';
        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö subjects
        const uniqueSubjectNames = [...new Set(appState.subjects.map(sub => sub.name))];

        if (uniqueSubjectNames.length === 0) {
            subjectNamesList.innerHTML = '<p style="text-align: center; color: #888; font-style: italic;">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤</p>';
            return;
        }

        uniqueSubjectNames.forEach((name, index) => {
            const div = document.createElement('div');
            div.classList.add('subject-name-item');
            div.innerHTML = `
                <span>${name}</span>
                <button class="remove-subject-name-button" data-name="${name}"><span class="material-icons">close</span></button>
            `;
            subjectNamesList.appendChild(div);
        });

        subjectNamesList.querySelectorAll('.remove-subject-name-button').forEach(button => {
            button.addEventListener('click', (e) => {
                const subjectNameToRemove = e.currentTarget.dataset.name;
                if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç "${subjectNameToRemove}"? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.`)) {
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                    appState.subjects = appState.subjects.filter(s => s.name !== subjectNameToRemove);
                    saveDataAuto();
                    renderSubjectNamesInSettings();
                    renderSubjects();
                    updateOverallStats();
                }
            });
        });
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∫–∞–ª—ã
    const generateGradeOptions = (scale) => {
        let options = '';
        switch (scale) {
            case '5-point':
                for (let i = 5; i >= 1; i--) {
                    options += `<option value="${i}">${i}</option>`;
                }
                break;
            case '12-point':
                for (let i = 12; i >= 1; i--) {
                    options += `<option value="${i}">${i}</option>`;
                }
                break;
            case '10-point':
                for (let i = 10; i >= 1; i--) {
                    options += `<option value="${i}">${i}</option>`;
                }
                break;
            case 'A-F':
                options += `
                    <option value="A">A</option>
                    <option value="B">B</option>
                    <option value="C">C</option>
                    <option value="D">D</option>
                    <option value="E">E</option>
                    <option value="F">F</option>
                `;
                break;
        }
        return options;
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ HTML-–∫–æ–¥–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)
    const createSubjectCard = (subjectData, subjectIndex) => {
        const subjectCard = document.createElement('div');
        subjectCard.classList.add('subject-card');
        subjectCard.dataset.index = subjectIndex;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
        if (subjectData.color) {
            subjectCard.style.borderLeft = `4px solid ${subjectData.color}`;
        }

        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        const subjectOptions = [...new Set(appState.subjects.map(s => s.name))]
            .map(name => `<option value="${name}" ${name === subjectData.name ? 'selected' : ''}>${name}</option>`)
            .join('');

        const icon = subjectData.icon || 'üìä';
        const goalText = subjectData.goal ? ` (–¶–µ–ª—å: ${subjectData.goal})` : '';
        const notesText = subjectData.notes ? `<div class="subject-notes">üìù ${subjectData.notes}</div>` : '';

        subjectCard.innerHTML = `
            <div class="subject-header">
                <div style="display: flex; align-items: center; flex-grow: 1;">
                    <span style="font-size: 1.2em; margin-right: 8px;">${icon}</span>
                    <select class="subject-select">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</option>
                        ${subjectOptions}
                    </select>
                </div>
                <button class="subject-settings-button" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞">
                    <span class="material-icons">settings</span>
                </button>
                <button class="remove-subject" title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç">
                    <span class="material-icons">close</span>
                </button>
            </div>
            ${notesText}
            <table class="grades-table">
                <thead>
                    <tr>
                        <th>–¢–∏–ø —Ä–∞–±–æ—Ç—ã</th>
                        <th>–û—Ü–µ–Ω–∫–∞</th>
                        <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                    </tr>
                </thead>
                <tbody>
                    ${subjectData.grades.map((grade, gradeIndex) => `
                        <tr data-grade-index="${gradeIndex}">
                            <td>
                                <select class="grade-type">
                                    ${appState.settings.workTypes.map(type => 
                                        `<option value="${type.name}" ${grade.type === type.name ? 'selected' : ''}>${type.name}</option>`
                                    ).join('')}
                                </select>
                            </td>
                            <td>
                                <select class="grade-value">
                                    ${generateGradeOptions(appState.settings.scale)}
                                </select>
                            </td>
                            <td>
                                <button class="remove-grade" data-grade-index="${gradeIndex}">
                                    <span class="material-icons">delete</span>
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
            <button class="add-grade">
                <span class="material-icons">add</span> –î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
            </button>
            <div class="subject-result">
                <p>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: <span class="avg-grade">0.00</span>${goalText}</p>
                <progress value="0" max="5"></progress>
            </div>
        `;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã
        subjectCard.querySelectorAll('.grades-table tbody tr').forEach((row, gradeIndex) => {
            const gradeValueSelect = row.querySelector('.grade-value');
            if (gradeValueSelect) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è select
                gradeValueSelect.value = String(subjectData.grades[gradeIndex].value);
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–π –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        addSubjectCardEventListeners(subjectCard, subjectIndex);

        return subjectCard;
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    const addSubjectCardEventListeners = (subjectCard, subjectIndex) => {
        const removeSubjectButton = subjectCard.querySelector('.remove-subject');
        removeSubjectButton.addEventListener('click', () => removeSubject(subjectIndex));

        const addGradeButton = subjectCard.querySelector('.add-grade');
        addGradeButton.addEventListener('click', () => addGrade(subjectIndex));

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
        const subjectSettingsButton = subjectCard.querySelector('.subject-settings-button');
        subjectSettingsButton.addEventListener('click', () => openSubjectSettings(subjectIndex));

        // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã –æ—Ü–µ–Ω–æ–∫
        subjectCard.querySelectorAll('.grades-table tbody tr').forEach(row => {
            const gradeIndex = parseInt(row.dataset.gradeIndex);
            const gradeTypeSelect = row.querySelector('.grade-type');
            const gradeValueSelect = row.querySelector('.grade-value');
            const removeGradeButton = row.querySelector('.remove-grade');

            gradeTypeSelect.addEventListener('change', (e) => {
                            appState.subjects[subjectIndex].grades[gradeIndex].type = e.target.value;
            calculateSubjectAvg(subjectIndex);
            saveDataAuto();
            });

            gradeValueSelect.addEventListener('change', (e) => {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–∞—è —à–∫–∞–ª–∞
                if (['5-point', '12-point', '10-point'].includes(appState.settings.scale)) {
                    appState.subjects[subjectIndex].grades[gradeIndex].value = parseFloat(e.target.value);
                } else { // –î–ª—è –±—É–∫–≤–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    appState.subjects[subjectIndex].grades[gradeIndex].value = e.target.value;
                }
                calculateSubjectAvg(subjectIndex);
                saveDataAuto();
            });

            removeGradeButton.addEventListener('click', () => removeGrade(subjectIndex, gradeIndex));
        });

        const subjectSelect = subjectCard.querySelector('.subject-select');
        subjectSelect.addEventListener('change', (e) => {
            appState.subjects[subjectIndex].name = e.target.value;
            saveDataAuto();
            updateOverallStats(); // –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –º–∞–∫—Å/–º–∏–Ω
        });

        // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        calculateSubjectAvg(subjectIndex);
    };

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const renderSubjects = () => {
        subjectsContainer.innerHTML = '';
        if (appState.subjects.length === 0) {
            addSubjectFab.style.display = 'flex'; // –ü–æ–∫–∞–∑–∞—Ç—å FAB, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            subjectsContainer.style.display = 'flex'; // –î–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            subjectsContainer.style.justifyContent = 'center';
            subjectsContainer.style.alignItems = 'center';
            subjectsContainer.innerHTML = `<p style="text-align: center; font-size: 1.2em; color: #888;">–ù–∞—á–Ω–∏—Ç–µ, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç!</p>`;
        } else {
            addSubjectFab.style.display = 'flex'; // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å FAB, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
            subjectsContainer.style.display = 'grid'; // –í–µ—Ä–Ω—É—Ç—å –∫ grid
            subjectsContainer.style.justifyContent = 'start';
            subjectsContainer.style.alignItems = 'start';
            appState.subjects.forEach((subject, index) => {
                subjectsContainer.appendChild(createSubjectCard(subject, index));
            });
        }
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    const addSubject = () => {
        const newSubject = {
            name: '–ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç', // –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å
            icon: 'üìä',
            color: '#4361EE',
            weight: 1.0,
            goal: null,
            notifications: false,
            autoCalc: true,
            notes: '',
            grades: []
        };
        appState.subjects.push(newSubject);
        saveData();
        renderSubjects(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
        updateOverallStats();
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    const removeSubject = (index) => {
        const subjectCard = subjectsContainer.querySelector(`[data-index="${index}"]`);
        if (subjectCard && confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç "${appState.subjects[index].name}" —Å–æ –≤—Å–µ–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏?`)) {
            subjectCard.classList.add('removing');
            subjectCard.addEventListener('animationend', () => {
                            appState.subjects.splice(index, 1);
            saveDataAuto();
            renderSubjects(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏ —É–±—Ä–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π
            updateOverallStats();
            });
        }
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫ –ø—Ä–µ–¥–º–µ—Ç—É
    const addGrade = (subjectIndex) => {
        const newGrade = {
            type: appState.settings.workTypes[0] ? appState.settings.workTypes[0].name : '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è', // –ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∏–ø –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
            value: appState.settings.scale === '5-point' ? 5 : (appState.settings.scale === '12-point' ? 12 : (appState.settings.scale === '10-point' ? 10 : 'A')) // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        };
        appState.subjects[subjectIndex].grades.push(newGrade);
        saveDataAuto();
        renderSubjects(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        updateOverallStats();
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞
    const removeGrade = (subjectIndex, gradeIndex) => {
        const subjectCard = subjectsContainer.querySelector(`[data-index="${subjectIndex}"]`);
        if (!subjectCard) return;

        const gradeRow = subjectCard.querySelector(`[data-grade-index="${gradeIndex}"]`);
        if (gradeRow && confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –æ—Ü–µ–Ω–∫—É?')) {
            appState.subjects[subjectIndex].grades.splice(gradeIndex, 1);
            saveDataAuto();
            renderSubjects(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏ —É–±—Ä–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é
            updateOverallStats();
        }
    };

    // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    const calculateSubjectAvg = (subjectIndex) => {
        const subject = appState.subjects[subjectIndex];
        const subjectCard = subjectsContainer.querySelector(`[data-index="${subjectIndex}"]`);
        if (!subjectCard) return;

        const avgValueSpan = subjectCard.querySelector('.avg-grade');
        const progressBar = subjectCard.querySelector('progress');

        if (subject.grades.length === 0) {
            avgValueSpan.textContent = '0.0';
            progressBar.value = 0;
            progressBar.max = 1;
            subject.avgGrade = 0; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            updateOverallStats();
            return;
        }

        let totalWeightedSum = 0;
        let totalWeight = 0;
        let maxPossibleGrade = 1; // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∫–∞–ª—ã

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —à–∫–∞–ª—ã
        switch (appState.settings.scale) {
            case '5-point': maxPossibleGrade = 5; break;
            case '12-point': maxPossibleGrade = 12; break;
            case '10-point': maxPossibleGrade = 10; break;
            case 'A-F': maxPossibleGrade = 5; // A=5, B=4, C=3, D=2, E=1, F=0 (–∏–ª–∏ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞)
                break;
        }

        subject.grades.forEach(grade => {
            const workType = appState.settings.workTypes.find(type => type.name === grade.type);
            if (workType) {
                let gradeValue = grade.value;
                if (appState.settings.scale === 'A-F') {
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É–∫–≤–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤ —á–∏—Å–ª–æ–≤—É—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                    switch (grade.value) {
                        case 'A': gradeValue = 5; break;
                        case 'B': gradeValue = 4; break;
                        case 'C': gradeValue = 3; break;
                        case 'D': gradeValue = 2; break;
                        case 'E': gradeValue = 1; break;
                        case 'F': gradeValue = 0; break;
                        default: gradeValue = 0; // –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    }
                }
                totalWeightedSum += gradeValue * workType.weight;
                totalWeight += workType.weight;
            }
        });

        let avg = totalWeight === 0 ? 0 : (totalWeightedSum / totalWeight);
        avgValueSpan.textContent = avg.toFixed(2);
        progressBar.value = avg;
        progressBar.max = maxPossibleGrade;

        subject.avgGrade = avg; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        updateOverallStats(); // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        saveDataAuto();
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ—É—Ç–µ—Ä–µ
    const updateOverallStats = () => {
        totalSubjectsSpan.textContent = appState.subjects.length;

        if (appState.subjects.length === 0) {
            overallAvgGradeSpan.textContent = '0.0';
            maxSubjectGradeSpan.textContent = '–ù–µ—Ç';
            minSubjectGradeSpan.textContent = '–ù–µ—Ç';
            return;
        }

        let totalAvgSum = 0;
        let maxAvg = -1;
        let minAvg = Infinity;
        let maxSubjectName = '–ù–µ—Ç';
        let minSubjectName = '–ù–µ—Ç';

        appState.subjects.forEach(subject => {
            if (typeof subject.avgGrade === 'number') { // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ avgGrade —Ä–∞—Å—Å—á–∏—Ç–∞–Ω
                const subjectWeight = subject.weight || 1.0; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å –ø—Ä–µ–¥–º–µ—Ç–∞
                totalAvgSum += subject.avgGrade * subjectWeight;

                if (subject.avgGrade > maxAvg) {
                    maxAvg = subject.avgGrade;
                    maxSubjectName = subject.name;
                }
                if (subject.avgGrade < minAvg) {
                    minAvg = subject.avgGrade;
                    minSubjectName = subject.name;
                }
            }
        });

        const overallAvg = appState.subjects.length === 0 ? 0 : (totalAvgSum / appState.subjects.length);
        overallAvgGradeSpan.textContent = overallAvg.toFixed(2);
        maxSubjectGradeSpan.textContent = `${maxSubjectName} (${maxAvg.toFixed(2)})`;
        minSubjectGradeSpan.textContent = `${minSubjectName} (${minAvg.toFixed(2)})`;
    };

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    const addSubjectFromTemplate = (subjectName) => {
        const template = subjectTemplatesData[subjectName];
        if (template) {
            const newSubject = {
                name: subjectName,
                icon: template.icon,
                color: template.color,
                weight: 1.0,
                goal: null,
                notifications: false,
                autoCalc: true,
                notes: '',
                grades: []
            };
            appState.subjects.push(newSubject);
            saveDataAuto();
            renderSubjects();
            updateOverallStats();
        }
    };

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ---

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
    const openSubjectSettings = (subjectIndex = -1) => {
        currentSubjectIndex = subjectIndex;
        isNewSubject = subjectIndex === -1;

        if (isNewSubject) {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            subjectNameInput.value = '';
            subjectColorInput.value = '#4361EE';
            subjectIconSelect.value = 'üìä';
            subjectWeightInput.value = '1.0';
            subjectGoalInput.value = '';
            subjectNotificationsCheckbox.checked = false;
            subjectAutoCalcCheckbox.checked = true;
            subjectNotesTextarea.value = '';
        } else {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            const subject = appState.subjects[subjectIndex];
            subjectNameInput.value = subject.name || '';
            subjectColorInput.value = subject.color || '#4361EE';
            subjectIconSelect.value = subject.icon || 'üìä';
            subjectWeightInput.value = subject.weight || '1.0';
            subjectGoalInput.value = subject.goal || '';
            subjectNotificationsCheckbox.checked = subject.notifications || false;
            subjectAutoCalcCheckbox.checked = subject.autoCalc !== false;
            subjectNotesTextarea.value = subject.notes || '';
        }

        subjectSettingsModal.style.display = 'flex';
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
    const saveSubjectSettings = () => {
        const name = subjectNameInput.value.trim();
        if (!name) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.');
            return;
        }

        const subjectData = {
            name: name,
            icon: subjectIconSelect.value,
            color: subjectColorInput.value,
            weight: parseFloat(subjectWeightInput.value) || 1.0,
            goal: subjectGoalInput.value ? parseFloat(subjectGoalInput.value) : null,
            notifications: subjectNotificationsCheckbox.checked,
            autoCalc: subjectAutoCalcCheckbox.checked,
            notes: subjectNotesTextarea.value.trim(),
            grades: isNewSubject ? [] : appState.subjects[currentSubjectIndex].grades
        };

        if (isNewSubject) {
            appState.subjects.push(subjectData);
        } else {
            appState.subjects[currentSubjectIndex] = subjectData;
        }

        saveDataAuto();
        renderSubjects();
        updateOverallStats();
        closeSubjectSettingsModal();
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
    const closeSubjectSettingsModal = () => {
        subjectSettingsModal.style.display = 'none';
        currentSubjectIndex = -1;
        isNewSubject = false;
    };



    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settingsButton.addEventListener('click', () => {
        settingsModal.style.display = 'flex';
        applySettings(); // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    closeModalButton.addEventListener('click', () => {
        settingsModal.style.display = 'none';
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    window.addEventListener('click', (e) => {
        if (e.target === settingsModal) {
            settingsModal.style.display = 'none';
        }
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (–∫–Ω–æ–ø–∫–∞ FAB)
    addSubjectFab.addEventListener('click', addSubject);

    // –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–∫–Ω–æ–ø–∫–∞ +)
    addSubjectQuickButton.addEventListener('click', () => {
        const subjectName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:');
        if (subjectName && subjectName.trim()) {
            const name = subjectName.trim();
            if (!appState.subjects.some(s => s.name === name)) {
                const newSubject = {
                    name: name,
                    icon: 'üìä',
                    color: '#4361EE',
                    weight: 1.0,
                    goal: null,
                    notifications: false,
                    autoCalc: true,
                    notes: '',
                    grades: []
                };
                appState.subjects.push(newSubject);
                saveDataAuto();
                renderSubjects();
                updateOverallStats();
            } else {
                alert('–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
            }
        }
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∫–∞–ª—ã –æ—Ü–µ–Ω–æ–∫ –≤ —à–∞–ø–∫–µ
    gradeScaleSelect.addEventListener('change', (e) => {
        appState.settings.scale = e.target.value;
        saveDataAuto();
        renderSubjects(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø—Ü–∏–∏ –æ—Ü–µ–Ω–æ–∫
    });

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã
    addWorkTypeButton.addEventListener('click', () => {
        const name = newWorkTypeNameInput.value.trim();
        const weight = parseFloat(newWorkTypeWeightInput.value);

        if (name && !isNaN(weight) && weight >= 0 && weight <= 1) {
            appState.settings.workTypes.push({ name, weight });
            newWorkTypeNameInput.value = '';
            newWorkTypeWeightInput.value = '';
            saveDataAuto();
            renderWorkTypesInSettings();
            renderSubjects(); // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ—Å (–æ—Ç 0.0 –¥–æ 1.0) –¥–ª—è —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã.');
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
    const addCustomSubject = () => {
        const name = newSubjectNameInput.value.trim();
        if (name && !appState.subjects.some(s => s.name === name)) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
            const newSubject = {
                name: name,
                icon: 'üìä',
                color: '#4361EE',
                weight: 1.0,
                goal: null,
                notifications: false,
                autoCalc: true,
                notes: '',
                grades: []
            };
            appState.subjects.push(newSubject);
            newSubjectNameInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            saveData();
            renderSubjects();
            updateOverallStats();
            alert(`–ü—Ä–µ–¥–º–µ—Ç "${name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
        } else if (name) {
            alert('–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.');
        }
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ (–¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞)
    addSubjectNameButton.addEventListener('click', addCustomSubject);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter
    newSubjectNameInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            addCustomSubject();
        }
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    darkThemeToggle.addEventListener('change', (e) => {
        appState.settings.theme = e.target.checked ? 'dark' : 'light';
        document.body.classList.toggle('dark-theme', e.target.checked);
        saveDataAuto();
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–ø–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
    showTipsToggle.addEventListener('change', (e) => {
        appState.settings.showTips = e.target.checked;
        saveDataAuto();
        if (appState.settings.showTips) {
            console.log('–ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã');
        } else {
            console.log('–ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã');
        }
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    autoSaveToggle.addEventListener('change', (e) => {
        appState.settings.autoSave = e.target.checked;
        saveDataAuto(); // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    });

    // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –≤ —à–∞–ø–∫–µ (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    saveDataButton.addEventListener('click', saveDataManual);

    // –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å" –≤ —à–∞–ø–∫–µ
    resetButton.addEventListener('click', () => {
        if (confirm('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –æ—Ü–µ–Ω–∫–∏\n‚Ä¢ –°–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n‚Ä¢ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n\n–ù–∞–∂–º–∏—Ç–µ "OK" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.')) {
            if (confirm('üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–õ–¨–ó–Ø –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
                resetData();
            }
        }
    });

    // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
    exportCsvButton.addEventListener('click', () => {
        let csvContent = "–ü—Ä–µ–¥–º–µ—Ç,–¢–∏–ø —Ä–∞–±–æ—Ç—ã,–û—Ü–µ–Ω–∫–∞,–í–µ—Å\n";
        appState.subjects.forEach(subject => {
            subject.grades.forEach(grade => {
                const workType = appState.settings.workTypes.find(wt => wt.name === grade.type);
                const weight = workType ? workType.weight : 'N/A';
                csvContent += `${subject.name},${grade.type},${grade.value},${weight}\n`;
            });
        });

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        if (link.download !== undefined) {
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', 'GradeMaster_data.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            alert('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV!');
        } else {
            alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç CSV.');
        }
    });

    // –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF (–∑–∞–≥–ª—É—à–∫–∞, —Ç—Ä–µ–±—É–µ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, jsPDF –∏–ª–∏ html2pdf)
    exportPdfButton.addEventListener('click', () => {
        alert('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, jsPDF –∏–ª–∏ html2pdf).');
        // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è html2pdf.js (–ø–æ—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏):
        /*
        const element = document.body; // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, subjectsContainer
        html2pdf().from(element).save('GradeMaster_report.pdf');
        */
    });

    // –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    resetDataButton.addEventListener('click', resetData);

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---
    subjectTemplates.forEach(template => {
        template.addEventListener('click', () => {
            const subjectName = template.dataset.subject;
            addSubjectFromTemplate(subjectName);
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            settingsModal.style.display = 'none';
        });
    });

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
    closeSubjectSettingsButton.addEventListener('click', closeSubjectSettingsModal);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    window.addEventListener('click', (e) => {
        if (e.target === subjectSettingsModal) {
            closeSubjectSettingsModal();
        }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
    saveSubjectSettingsButton.addEventListener('click', saveSubjectSettings);
    
    // –û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
    cancelSubjectSettingsButton.addEventListener('click', closeSubjectSettingsModal);

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ - —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    addSubjectFab.removeEventListener('click', addSubject);
    addSubjectFab.addEventListener('click', () => {
        openSubjectSettings(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    });
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    addSubjectQuickButton.removeEventListener('click', addSubject);
    addSubjectQuickButton.addEventListener('click', () => {
        openSubjectSettings(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    });

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
    loadData(); // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(() => {
        saveData();
        console.log('–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    }, 1000);

    // –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ —Ç–∞–ø–∞ –¥–ª—è –∑—É–º–∞
    let lastTouchEnd = 0;
    document.addEventListener('touchend', function (event) {
        const now = (new Date()).getTime();
        if (now - lastTouchEnd <= 300) {
            event.preventDefault();
        }
        lastTouchEnd = now;
    }, false);

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º —Ç–∞–ø–µ
    document.addEventListener('gesturestart', function (e) {
        e.preventDefault();
    });

    document.addEventListener('gesturechange', function (e) {
        e.preventDefault();
    });

    document.addEventListener('gestureend', function (e) {
        e.preventDefault();
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => {
        saveData();
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
            saveData();
        }
    });
});